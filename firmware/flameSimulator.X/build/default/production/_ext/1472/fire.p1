Version 3.2 HI-TECH Software Intermediate Code
"11 ../fire.c
[s S5 `uc 1 `uc 1 `uc 1 ]
[n S5 . r g b ]
"19
[s S6 `uc 1 `uc 1 `uc 1 ]
[n S6 . h s v ]
"4 /Applications/microchip/xc8/v1.32/include/math.h
[v _floor `(d ~T0 @X0 0 ef1`d ]
"17 ../include/main.h
[v _bitmapPutPixel `(v ~T0 @X0 0 ef5`uc`uc`uc`uc`uc ]
"72 /Applications/microchip/xc8/v1.32/include/stdlib.h
[v _rand `(i ~T0 @X0 0 ef ]
"73
[v _srand `(v ~T0 @X0 0 ef1`ui ]
[; ;stdlib.h: 4: typedef int ptrdiff_t;
[; ;stdlib.h: 5: typedef unsigned size_t;
[; ;stdlib.h: 6: typedef unsigned short wchar_t;
[; ;stdlib.h: 16: extern int errno;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;stdlib.h: 91: extern void abort(void);
[; ;stdlib.h: 92: extern void exit(int);
[; ;stdlib.h: 93: extern int atexit(void (*)(void));
[; ;stdlib.h: 94: extern char * getenv(const char *);
[; ;stdlib.h: 95: extern char ** environ;
[; ;stdlib.h: 96: extern int system(char *);
[; ;stdlib.h: 97: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 98: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 99: extern int abs(int);
[; ;stdlib.h: 100: extern long labs(long);
[; ;stdlib.h: 103: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 104: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 109: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 110: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 112: extern char * ftoa(float f, int * status);
[; ;math.h: 3: extern double fabs(double);
[; ;math.h: 4: extern double floor(double);
[; ;math.h: 5: extern double ceil(double);
[; ;math.h: 6: extern double modf(double, double *);
[; ;math.h: 7: extern double sqrt(double);
[; ;math.h: 8: extern double atof(const char *);
[; ;math.h: 9: extern double sin(double);
[; ;math.h: 10: extern double cos(double);
[; ;math.h: 11: extern double tan(double);
[; ;math.h: 12: extern double asin(double);
[; ;math.h: 13: extern double acos(double);
[; ;math.h: 14: extern double atan(double);
[; ;math.h: 15: extern double atan2(double, double);
[; ;math.h: 16: extern double log(double);
[; ;math.h: 17: extern double log10(double);
[; ;math.h: 18: extern double pow(double, double);
[; ;math.h: 19: extern double exp(double);
[; ;math.h: 20: extern double sinh(double);
[; ;math.h: 21: extern double cosh(double);
[; ;math.h: 22: extern double tanh(double);
[; ;math.h: 23: extern double eval_poly(double, const double *, int);
[; ;math.h: 24: extern double frexp(double, int *);
[; ;math.h: 25: extern double ldexp(double, int);
[; ;math.h: 26: extern double fmod(double, double);
[; ;math.h: 27: extern double trunc(double);
[; ;math.h: 28: extern double round(double);
[; ;main.h: 15: void matrixTest(void);
[; ;main.h: 16: void bitmapTest(void);
[; ;main.h: 17: void bitmapPutPixel(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char);
[; ;main.h: 18: void bitmapGetPixel(unsigned char x, unsigned char y, unsigned char *, unsigned char *, unsigned char *);
[; ;main.h: 19: void bitmapDrawChar(signed char, signed char, unsigned char, unsigned char, unsigned char, unsigned char);
[; ;main.h: 20: void bitmapClear(void);
[; ;main.h: 21: void showTime(void);
[; ;main.h: 22: void setTime(void);
[; ;fire.h: 15: void HSVtoRGB(void *vRGB, void *vHSV);
[; ;fire.h: 16: void setPixel(unsigned char x, unsigned char y, unsigned char colorR, unsigned char colorG, unsigned char colorB);
[; ;fire.h: 17: void generateLine(void);
[; ;fire.h: 18: void shiftUp(void);
[; ;fire.h: 19: void drawFrame(int pcnt);
[; ;fire.h: 20: void setup(void);
[; ;fire.h: 21: void HSL_to_RGB(unsigned int hue, unsigned int sat, unsigned int lum, unsigned int* r, unsigned int* g, unsigned int* b);
[; ;fire.c: 10: typedef struct
[; ;fire.c: 11: {
[; ;fire.c: 12: unsigned char r;
[; ;fire.c: 13: unsigned char g;
[; ;fire.c: 14: unsigned char b;
[; ;fire.c: 15: } ColorRGB;
[; ;fire.c: 18: typedef struct
[; ;fire.c: 19: {
[; ;fire.c: 20: unsigned char h;
[; ;fire.c: 21: unsigned char s;
[; ;fire.c: 22: unsigned char v;
[; ;fire.c: 23: } ColorHSV;
[v F250 `Cuc ~T0 @X0 -> 8 `i t ]
"26 ../fire.c
[v _valueMask `F250 ~T0 @X0 -> 8 `i e ]
[i _valueMask
:U ..
:U ..
"27
-> -> 32 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 32 `i `uc
..
:U ..
"28
-> -> 64 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 64 `i `uc
..
:U ..
"29
-> -> 96 `i `uc
-> -> 32 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 32 `i `uc
-> -> 96 `i `uc
..
:U ..
"30
-> -> 128 `i `uc
-> -> 64 `i `uc
-> -> 32 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 32 `i `uc
-> -> 64 `i `uc
-> -> 128 `i `uc
..
:U ..
"31
-> -> 160 `i `uc
-> -> 96 `i `uc
-> -> 64 `i `uc
-> -> 32 `i `uc
-> -> 32 `i `uc
-> -> 64 `i `uc
-> -> 96 `i `uc
-> -> 160 `i `uc
..
:U ..
"32
-> -> 192 `i `uc
-> -> 128 `i `uc
-> -> 96 `i `uc
-> -> 64 `i `uc
-> -> 64 `i `uc
-> -> 96 `i `uc
-> -> 128 `i `uc
-> -> 192 `i `uc
..
:U ..
"33
-> -> 255 `i `uc
-> -> 160 `i `uc
-> -> 128 `i `uc
-> -> 96 `i `uc
-> -> 96 `i `uc
-> -> 128 `i `uc
-> -> 160 `i `uc
-> -> 255 `i `uc
..
:U ..
"34
-> -> 255 `i `uc
-> -> 192 `i `uc
-> -> 160 `i `uc
-> -> 128 `i `uc
-> -> 128 `i `uc
-> -> 160 `i `uc
-> -> 192 `i `uc
-> -> 255 `i `uc
..
..
]
[; ;fire.c: 26: const unsigned char valueMask[8][8]={
[; ;fire.c: 27: {32 , 0 , 0 , 0 , 0 , 0 , 0 , 32 },
[; ;fire.c: 28: {64 , 0 , 0 , 0 , 0 , 0 , 0 , 64 },
[; ;fire.c: 29: {96 , 32 , 0 , 0 , 0 , 0 , 32 , 96 },
[; ;fire.c: 30: {128, 64 , 32 , 0 , 0 , 32 , 64 , 128},
[; ;fire.c: 31: {160, 96 , 64 , 32 , 32 , 64 , 96 , 160},
[; ;fire.c: 32: {192, 128, 96 , 64 , 64 , 96 , 128, 192},
[; ;fire.c: 33: {255, 160, 128, 96 , 96 , 128, 160, 255},
[; ;fire.c: 34: {255, 192, 160, 128, 128, 160, 192, 255}
[; ;fire.c: 35: };
[v F252 `Cuc ~T0 @X0 -> 8 `i t ]
"39
[v _hueMask `F252 ~T0 @X0 -> 8 `i e ]
[i _hueMask
:U ..
:U ..
"40
-> -> 1 `i `uc
-> -> 4 `i `uc
-> -> 7 `i `uc
-> -> 9 `i `uc
-> -> 9 `i `uc
-> -> 8 `i `uc
-> -> 4 `i `uc
-> -> 1 `i `uc
..
:U ..
"41
-> -> 1 `i `uc
-> -> 3 `i `uc
-> -> 5 `i `uc
-> -> 7 `i `uc
-> -> 9 `i `uc
-> -> 7 `i `uc
-> -> 3 `i `uc
-> -> 1 `i `uc
..
:U ..
"42
-> -> 1 `i `uc
-> -> 3 `i `uc
-> -> 5 `i `uc
-> -> 6 `i `uc
-> -> 7 `i `uc
-> -> 6 `i `uc
-> -> 3 `i `uc
-> -> 1 `i `uc
..
:U ..
"43
-> -> 1 `i `uc
-> -> 2 `i `uc
-> -> 4 `i `uc
-> -> 5 `i `uc
-> -> 5 `i `uc
-> -> 5 `i `uc
-> -> 2 `i `uc
-> -> 1 `i `uc
..
:U ..
"44
-> -> 1 `i `uc
-> -> 2 `i `uc
-> -> 4 `i `uc
-> -> 4 `i `uc
-> -> 4 `i `uc
-> -> 4 `i `uc
-> -> 2 `i `uc
-> -> 1 `i `uc
..
:U ..
"45
-> -> 0 `i `uc
-> -> 1 `i `uc
-> -> 2 `i `uc
-> -> 3 `i `uc
-> -> 3 `i `uc
-> -> 2 `i `uc
-> -> 1 `i `uc
-> -> 0 `i `uc
..
:U ..
"46
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 1 `i `uc
-> -> 2 `i `uc
-> -> 2 `i `uc
-> -> 1 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
:U ..
"47
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 1 `i `uc
-> -> 1 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
..
]
[; ;fire.c: 39: const unsigned char hueMask[8][8]={
[; ;fire.c: 40: {1, 4, 7, 9, 9, 8, 4, 1},
[; ;fire.c: 41: {1, 3, 5, 7, 9, 7, 3, 1},
[; ;fire.c: 42: {1, 3, 5, 6, 7, 6, 3, 1},
[; ;fire.c: 43: {1, 2, 4, 5, 5, 5, 2, 1},
[; ;fire.c: 44: {1, 2, 4, 4, 4, 4, 2, 1},
[; ;fire.c: 45: {0, 1, 2, 3, 3, 2, 1, 0},
[; ;fire.c: 46: {0, 0, 1, 2, 2, 1, 0, 0},
[; ;fire.c: 47: {0, 0, 0, 1, 1, 0, 0, 0}
[; ;fire.c: 48: };
[v F254 `uc ~T0 @X0 -> 8 `i t ]
"50
[v _matrix `F254 ~T0 @X0 -> 8 `i e ]
[; ;fire.c: 50: unsigned char matrix[8][8];
"51
[v _line `uc ~T0 @X0 -> 8 `i e ]
[; ;fire.c: 51: unsigned char line[8];
"56
[v _HSVtoRGB `(v ~T0 @X0 1 ef2`*v`*v ]
"57
{
[; ;fire.c: 56: void HSVtoRGB(void *vRGB, void *vHSV)
[; ;fire.c: 57: {
[e :U _HSVtoRGB ]
"56
[v _vRGB `*v ~T0 @X0 1 r1 ]
[v _vHSV `*v ~T0 @X0 1 r2 ]
"57
[f ]
"58
[v _colorRGB `*S5 ~T0 @X0 1 a ]
[; ;fire.c: 58: ColorRGB *colorRGB=(ColorRGB *)vRGB;
[e = _colorRGB -> _vRGB `*S5 ]
"59
[v _colorHSV `*S6 ~T0 @X0 1 a ]
[; ;fire.c: 59: ColorHSV *colorHSV=(ColorHSV *)vHSV;
[e = _colorHSV -> _vHSV `*S6 ]
"61
[v _r `f ~T0 @X0 1 a ]
[v _g `f ~T0 @X0 1 a ]
[v _b `f ~T0 @X0 1 a ]
[v _h `f ~T0 @X0 1 a ]
[v _s `f ~T0 @X0 1 a ]
[v _v `f ~T0 @X0 1 a ]
"62
[v _f `f ~T0 @X0 1 a ]
[v _p `f ~T0 @X0 1 a ]
[v _q `f ~T0 @X0 1 a ]
[v _t `f ~T0 @X0 1 a ]
"63
[v _i `i ~T0 @X0 1 a ]
[; ;fire.c: 61: float r, g, b, h, s, v;
[; ;fire.c: 62: float f, p, q, t;
[; ;fire.c: 63: int i;
[; ;fire.c: 65: h = (float)(colorHSV->h / 256.0);
"65
[e = _h -> / -> . *U _colorHSV 0 `d .256.0 `f ]
[; ;fire.c: 66: s = (float)(colorHSV->s / 256.0);
"66
[e = _s -> / -> . *U _colorHSV 1 `d .256.0 `f ]
[; ;fire.c: 67: v = (float)(colorHSV->v / 256.0);
"67
[e = _v -> / -> . *U _colorHSV 2 `d .256.0 `f ]
[; ;fire.c: 70: if(s == 0.0) {
"70
[e $ ! == -> _s `d .0.0 8  ]
{
[; ;fire.c: 71: b = v;
"71
[e = _b _v ]
[; ;fire.c: 72: g = b;
"72
[e = _g _b ]
[; ;fire.c: 73: r = g;
"73
[e = _r _g ]
"74
}
[; ;fire.c: 74: }
[e $U 9  ]
"76
[e :U 8 ]
[; ;fire.c: 76: else
[; ;fire.c: 77: {
"77
{
[; ;fire.c: 78: h *= 6.0;
"78
[e =* _h -> .6.0 `f ]
[; ;fire.c: 79: i = (int)(floor(h));
"79
[e = _i -> ( _floor (1 -> _h `d `i ]
[; ;fire.c: 80: f = h - i;
"80
[e = _f - _h -> _i `f ]
[; ;fire.c: 82: p = (float)(v * (1.0 - s));
"82
[e = _p -> * -> _v `d - .1.0 -> _s `d `f ]
[; ;fire.c: 83: q = (float)(v * (1.0 - (s * f)));
"83
[e = _q -> * -> _v `d - .1.0 -> * _s _f `d `f ]
[; ;fire.c: 84: t = (float)(v * (1.0 - (s * (1.0 - f))));
"84
[e = _t -> * -> _v `d - .1.0 * -> _s `d - .1.0 -> _f `d `f ]
[; ;fire.c: 86: switch(i)
"86
[e $U 11  ]
[; ;fire.c: 87: {
"87
{
[; ;fire.c: 88: case 0: r=v; g=t; b=p; break;
"88
[e :U 12 ]
[e = _r _v ]
[e = _g _t ]
[e = _b _p ]
[e $U 10  ]
[; ;fire.c: 89: case 1: r=q; g=v; b=p; break;
"89
[e :U 13 ]
[e = _r _q ]
[e = _g _v ]
[e = _b _p ]
[e $U 10  ]
[; ;fire.c: 90: case 2: r=p; g=v; b=t; break;
"90
[e :U 14 ]
[e = _r _p ]
[e = _g _v ]
[e = _b _t ]
[e $U 10  ]
[; ;fire.c: 91: case 3: r=p; g=q; b=v; break;
"91
[e :U 15 ]
[e = _r _p ]
[e = _g _q ]
[e = _b _v ]
[e $U 10  ]
[; ;fire.c: 92: case 4: r=t; g=p; b=v; break;
"92
[e :U 16 ]
[e = _r _t ]
[e = _g _p ]
[e = _b _v ]
[e $U 10  ]
[; ;fire.c: 93: case 5: r=v; g=p; b=q; break;
"93
[e :U 17 ]
[e = _r _v ]
[e = _g _p ]
[e = _b _q ]
[e $U 10  ]
[; ;fire.c: 94: default: r = g = b = 0; break;
"94
[e :U 18 ]
[e = _r = _g = _b -> -> 0 `i `f ]
[e $U 10  ]
"95
}
[; ;fire.c: 95: }
[e $U 10  ]
"86
[e :U 11 ]
[e [\ _i , $ -> 0 `i 12
 , $ -> 1 `i 13
 , $ -> 2 `i 14
 , $ -> 3 `i 15
 , $ -> 4 `i 16
 , $ -> 5 `i 17
 18 ]
"95
[e :U 10 ]
"96
}
[e :U 9 ]
[; ;fire.c: 96: }
[; ;fire.c: 98: colorRGB->r = (int)(r * 255.0);
"98
[e = . *U _colorRGB 0 -> -> * -> _r `d .255.0 `i `uc ]
[; ;fire.c: 99: colorRGB->g = (int)(g * 255.0);
"99
[e = . *U _colorRGB 1 -> -> * -> _g `d .255.0 `i `uc ]
[; ;fire.c: 100: colorRGB->b = (int)(b * 255.0);
"100
[e = . *U _colorRGB 2 -> -> * -> _b `d .255.0 `i `uc ]
[; ;fire.c: 112: }
"112
[e :UE 7 ]
}
"114
[v _HSL_to_RGB `(v ~T0 @X0 1 ef6`ui`ui`ui`*ui`*ui`*ui ]
"115
{
[; ;fire.c: 114: void HSL_to_RGB(unsigned int hue, unsigned int sat, unsigned int lum, unsigned int* r, unsigned int* g, unsigned int* b)
[; ;fire.c: 115: {
[e :U _HSL_to_RGB ]
"114
[v _hue `ui ~T0 @X0 1 r1 ]
[v _sat `ui ~T0 @X0 1 r2 ]
[v _lum `ui ~T0 @X0 1 r3 ]
[v _r `*ui ~T0 @X0 1 r4 ]
[v _g `*ui ~T0 @X0 1 r5 ]
[v _b `*ui ~T0 @X0 1 r6 ]
"115
[f ]
"116
[v _v `ui ~T0 @X0 1 a ]
[; ;fire.c: 116: unsigned int v;
[; ;fire.c: 118: v = (lum < 128) ? (lum * (256 + sat)) >> 8 :
[; ;fire.c: 119: (((lum + sat) << 8) - lum * sat) >> 8;
"119
[e = _v ? < _lum -> -> 128 `i `ui : >> * _lum + -> -> 256 `i `ui _sat -> 8 `i >> - << + _lum _sat -> 8 `i * _lum _sat -> 8 `i ]
[; ;fire.c: 120: if (v <= 0) {
"120
[e $ ! <= _v -> -> 0 `i `ui 20  ]
{
[; ;fire.c: 121: *r = *g = *b = 0;
"121
[e = *U _r = *U _g = *U _b -> -> 0 `i `ui ]
"122
}
[; ;fire.c: 122: } else {
[e $U 21  ]
[e :U 20 ]
{
"123
[v _m `i ~T0 @X0 1 a ]
"124
[v _sextant `i ~T0 @X0 1 a ]
"125
[v _fract `i ~T0 @X0 1 a ]
[v _vsf `i ~T0 @X0 1 a ]
[v _mid1 `i ~T0 @X0 1 a ]
[v _mid2 `i ~T0 @X0 1 a ]
[; ;fire.c: 123: int m;
[; ;fire.c: 124: int sextant;
[; ;fire.c: 125: int fract, vsf, mid1, mid2;
[; ;fire.c: 127: m = lum + lum - v;
"127
[e = _m -> - + _lum _lum _v `i ]
[; ;fire.c: 128: hue *= 6;
"128
[e =* _hue -> -> 6 `i `ui ]
[; ;fire.c: 129: sextant = hue >> 8;
"129
[e = _sextant -> >> _hue -> 8 `i `i ]
[; ;fire.c: 130: fract = hue - (sextant << 8);
"130
[e = _fract -> - _hue -> << _sextant -> 8 `i `ui `i ]
[; ;fire.c: 131: vsf = v * fract * (v - m) / v >> 8;
"131
[e = _vsf -> >> / * * _v -> _fract `ui - _v -> _m `ui _v -> 8 `i `i ]
[; ;fire.c: 132: mid1 = m + vsf;
"132
[e = _mid1 + _m _vsf ]
[; ;fire.c: 133: mid2 = v - vsf;
"133
[e = _mid2 -> - _v -> _vsf `ui `i ]
[; ;fire.c: 134: switch (sextant) {
"134
[e $U 23  ]
{
[; ;fire.c: 135: case 0: *r = v; *g = mid1; *b = m; break;
"135
[e :U 24 ]
[e = *U _r _v ]
[e = *U _g -> _mid1 `ui ]
[e = *U _b -> _m `ui ]
[e $U 22  ]
[; ;fire.c: 136: case 1: *r = mid2; *g = v; *b = m; break;
"136
[e :U 25 ]
[e = *U _r -> _mid2 `ui ]
[e = *U _g _v ]
[e = *U _b -> _m `ui ]
[e $U 22  ]
[; ;fire.c: 137: case 2: *r = m; *g = v; *b = mid1; break;
"137
[e :U 26 ]
[e = *U _r -> _m `ui ]
[e = *U _g _v ]
[e = *U _b -> _mid1 `ui ]
[e $U 22  ]
[; ;fire.c: 138: case 3: *r = m; *g = mid2; *b = v; break;
"138
[e :U 27 ]
[e = *U _r -> _m `ui ]
[e = *U _g -> _mid2 `ui ]
[e = *U _b _v ]
[e $U 22  ]
[; ;fire.c: 139: case 4: *r = mid1; *g = m; *b = v; break;
"139
[e :U 28 ]
[e = *U _r -> _mid1 `ui ]
[e = *U _g -> _m `ui ]
[e = *U _b _v ]
[e $U 22  ]
[; ;fire.c: 140: case 5: *r = v; *g = m; *b = mid2; break;
"140
[e :U 29 ]
[e = *U _r _v ]
[e = *U _g -> _m `ui ]
[e = *U _b -> _mid2 `ui ]
[e $U 22  ]
"141
}
[; ;fire.c: 141: }
[e $U 22  ]
"134
[e :U 23 ]
[e [\ _sextant , $ -> 0 `i 24
 , $ -> 1 `i 25
 , $ -> 2 `i 26
 , $ -> 3 `i 27
 , $ -> 4 `i 28
 , $ -> 5 `i 29
 22 ]
"141
[e :U 22 ]
"142
}
[e :U 21 ]
[; ;fire.c: 142: }
[; ;fire.c: 143: }
"143
[e :UE 19 ]
}
"145
[v _setPixel `(v ~T0 @X0 1 ef5`uc`uc`uc`uc`uc ]
{
[; ;fire.c: 145: void setPixel(unsigned char x, unsigned char y, unsigned char colorR, unsigned char colorG, unsigned char colorB){
[e :U _setPixel ]
[v _x `uc ~T0 @X0 1 r1 ]
[v _y `uc ~T0 @X0 1 r2 ]
[v _colorR `uc ~T0 @X0 1 r3 ]
[v _colorG `uc ~T0 @X0 1 r4 ]
[v _colorB `uc ~T0 @X0 1 r5 ]
[f ]
[; ;fire.c: 147: bitmapPutPixel(8-y-1, x, colorR, colorG, colorB);
"147
[e ( _bitmapPutPixel (4 , , , , -> - - -> 8 `i -> _y `i -> 1 `i `uc _x _colorR _colorG _colorB ]
[; ;fire.c: 148: }
"148
[e :UE 30 ]
}
"153
[v _generateLine `(v ~T0 @X0 1 ef ]
{
[; ;fire.c: 153: void generateLine(){
[e :U _generateLine ]
[f ]
[; ;fire.c: 154: for(unsigned char x=0;x<8;x++) {
"154
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 32  ]
[e $U 33  ]
[e :U 32 ]
{
[; ;fire.c: 155: line[x] = rand()%63;
"155
[e = *U + &U _line * -> _x `ux -> -> # *U &U _line `ui `ux -> % ( _rand ..  -> 63 `i `uc ]
"156
}
"154
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 32  ]
[e :U 33 ]
"156
}
[; ;fire.c: 156: }
[; ;fire.c: 157: }
"157
[e :UE 31 ]
}
"162
[v _shiftUp `(v ~T0 @X0 1 ef ]
{
[; ;fire.c: 162: void shiftUp(){
[e :U _shiftUp ]
[f ]
"163
[v _colorRGB `S5 ~T0 @X0 1 a ]
[; ;fire.c: 163: ColorRGB colorRGB;
[; ;fire.c: 165: for (unsigned char y=8-1;y>0;y--) {
"165
{
[v _y `uc ~T0 @X0 1 a ]
[e = _y -> - -> 8 `i -> 1 `i `uc ]
[e $ > -> _y `i -> 0 `i 36  ]
[e $U 37  ]
[e :U 36 ]
{
[; ;fire.c: 166: for(unsigned char x=0;x<8;x++) {
"166
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 39  ]
[e $U 40  ]
[e :U 39 ]
{
[; ;fire.c: 167: matrix[x][y] = matrix[x][y-1];
"167
[e = *U + &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux * -> _y `ux -> -> # *U &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux `ui `ux *U + &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux * -> -> - -> _y `i -> 1 `i `ui `ux -> -> # *U &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux `ui `ux ]
"168
}
"166
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 39  ]
[e :U 40 ]
"168
}
"169
}
"165
[e -- _y -> -> 1 `i `uc ]
[e $ > -> _y `i -> 0 `i 36  ]
[e :U 37 ]
"169
}
[; ;fire.c: 168: }
[; ;fire.c: 169: }
[; ;fire.c: 171: for(unsigned char x=0;x<8;x++) {
"171
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 42  ]
[e $U 43  ]
[e :U 42 ]
{
[; ;fire.c: 172: matrix[x][0] = line[x];
"172
[e = *U + &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux * -> -> -> 0 `i `ui `ux -> -> # *U &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux `ui `ux *U + &U _line * -> _x `ux -> -> # *U &U _line `ui `ux ]
"173
}
"171
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 42  ]
[e :U 43 ]
"173
}
[; ;fire.c: 173: }
[; ;fire.c: 174: }
"174
[e :UE 35 ]
}
"180
[v _drawFrame `(v ~T0 @X0 1 ef1`i ]
{
[; ;fire.c: 180: void drawFrame(int pcnt){
[e :U _drawFrame ]
[v _pcnt `i ~T0 @X0 1 r1 ]
[f ]
"181
[v _colorRGB `S5 ~T0 @X0 1 a ]
"182
[v _colorHSV `S6 ~T0 @X0 1 a ]
"183
[v _nextv `i ~T0 @X0 1 a ]
[; ;fire.c: 181: ColorRGB colorRGB;
[; ;fire.c: 182: ColorHSV colorHSV;
[; ;fire.c: 183: int nextv;
[; ;fire.c: 186: for (unsigned char y=8-1;y>0;y--) {
"186
{
[v _y `uc ~T0 @X0 1 a ]
[e = _y -> - -> 8 `i -> 1 `i `uc ]
[e $ > -> _y `i -> 0 `i 46  ]
[e $U 47  ]
[e :U 46 ]
{
[; ;fire.c: 187: for (unsigned char x=0;x<8;x++) {
"187
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 49  ]
[e $U 50  ]
[e :U 49 ]
{
[; ;fire.c: 188: colorHSV.h = hueMask[y][x];
"188
[e = . _colorHSV 0 *U + &U *U + &U _hueMask * -> _y `ux -> * -> # *U &U *U &U _hueMask `ui -> -> 8 `i `ui `ux * -> _x `ux -> -> # *U &U *U + &U _hueMask * -> _y `ux -> * -> # *U &U *U &U _hueMask `ui -> -> 8 `i `ui `ux `ui `ux ]
[; ;fire.c: 189: colorHSV.s = 255;
"189
[e = . _colorHSV 1 -> -> 255 `i `uc ]
[; ;fire.c: 190: nextv =
[; ;fire.c: 191: (((100-pcnt)*matrix[x][y]
[; ;fire.c: 192: + pcnt*matrix[x][y-1])/100)
[; ;fire.c: 193: - valueMask[y][x];
"193
[e = _nextv - / + * - -> 100 `i _pcnt -> *U + &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux * -> _y `ux -> -> # *U &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux `ui `ux `i * _pcnt -> *U + &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux * -> -> - -> _y `i -> 1 `i `ui `ux -> -> # *U &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux `ui `ux `i -> 100 `i -> *U + &U *U + &U _valueMask * -> _y `ux -> * -> # *U &U *U &U _valueMask `ui -> -> 8 `i `ui `ux * -> _x `ux -> -> # *U &U *U + &U _valueMask * -> _y `ux -> * -> # *U &U *U &U _valueMask `ui -> -> 8 `i `ui `ux `ui `ux `i ]
[; ;fire.c: 194: colorHSV.v = (unsigned char)(((0) > (nextv)) ? (0) : (nextv));
"194
[e = . _colorHSV 2 -> ? > -> 0 `i _nextv : -> 0 `i _nextv `uc ]
[; ;fire.c: 196: HSVtoRGB(&colorRGB, &colorHSV);
"196
[e ( _HSVtoRGB (2 , -> &U _colorRGB `*v -> &U _colorHSV `*v ]
[; ;fire.c: 197: setPixel(x, y, colorRGB.r, colorRGB.g, colorRGB.b);
"197
[e ( _setPixel (4 , , , , _x _y . _colorRGB 0 . _colorRGB 1 . _colorRGB 2 ]
"199
}
"187
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 49  ]
[e :U 50 ]
"199
}
"200
}
"186
[e -- _y -> -> 1 `i `uc ]
[e $ > -> _y `i -> 0 `i 46  ]
[e :U 47 ]
"200
}
[; ;fire.c: 199: }
[; ;fire.c: 200: }
[; ;fire.c: 203: for(unsigned char x=0;x<8;x++) {
"203
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 52  ]
[e $U 53  ]
[e :U 52 ]
{
[; ;fire.c: 204: colorHSV.h = hueMask[0][x];
"204
[e = . _colorHSV 0 *U + &U *U + &U _hueMask * -> -> -> 0 `i `ui `ux -> * -> # *U &U *U &U _hueMask `ui -> -> 8 `i `ui `ux * -> _x `ux -> -> # *U &U *U + &U _hueMask * -> -> -> 0 `i `ui `ux -> * -> # *U &U *U &U _hueMask `ui -> -> 8 `i `ui `ux `ui `ux ]
[; ;fire.c: 205: colorHSV.s = 255;
"205
[e = . _colorHSV 1 -> -> 255 `i `uc ]
[; ;fire.c: 206: colorHSV.v = (unsigned char)(((100-pcnt)*matrix[x][0] + pcnt*line[x])/100);
"206
[e = . _colorHSV 2 -> / + * - -> 100 `i _pcnt -> *U + &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux * -> -> -> 0 `i `ui `ux -> -> # *U &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux `ui `ux `i * _pcnt -> *U + &U _line * -> _x `ux -> -> # *U &U _line `ui `ux `i -> 100 `i `uc ]
[; ;fire.c: 208: HSVtoRGB(&colorRGB, &colorHSV);
"208
[e ( _HSVtoRGB (2 , -> &U _colorRGB `*v -> &U _colorHSV `*v ]
[; ;fire.c: 209: setPixel(x, 0, colorRGB.r, colorRGB.g, colorRGB.b);
"209
[e ( _setPixel (4 , , , , _x -> -> 0 `i `uc . _colorRGB 0 . _colorRGB 1 . _colorRGB 2 ]
"211
}
"203
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 52  ]
[e :U 53 ]
"211
}
[; ;fire.c: 211: }
[; ;fire.c: 212: }
"212
[e :UE 45 ]
}
"214
[v _setup `(v ~T0 @X0 1 ef ]
"215
{
[; ;fire.c: 214: void setup()
[; ;fire.c: 215: {
[e :U _setup ]
[f ]
[; ;fire.c: 216: srand(12345);
"216
[e ( _srand (1 -> -> 12345 `i `ui ]
[; ;fire.c: 217: generateLine();
"217
[e ( _generateLine ..  ]
[; ;fire.c: 220: for (unsigned char y=0;y<8;y++) {
"220
{
[v _y `uc ~T0 @X0 1 a ]
[e = _y -> -> 0 `i `uc ]
[e $ < -> _y `i -> 8 `i 56  ]
[e $U 57  ]
[e :U 56 ]
{
[; ;fire.c: 221: for(unsigned char x=0;x<8;x++) {
"221
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 59  ]
[e $U 60  ]
[e :U 59 ]
{
[; ;fire.c: 222: matrix[x][y] = 0;
"222
[e = *U + &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux * -> _y `ux -> -> # *U &U *U + &U _matrix * -> _x `ux -> * -> # *U &U *U &U _matrix `ui -> -> 8 `i `ui `ux `ui `ux -> -> 0 `i `uc ]
"223
}
"221
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 59  ]
[e :U 60 ]
"223
}
"224
}
"220
[e ++ _y -> -> 1 `i `uc ]
[e $ < -> _y `i -> 8 `i 56  ]
[e :U 57 ]
"224
}
[; ;fire.c: 223: }
[; ;fire.c: 224: }
[; ;fire.c: 225: }
"225
[e :UE 55 ]
}
